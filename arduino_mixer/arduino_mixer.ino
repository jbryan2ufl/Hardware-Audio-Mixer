#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED display dimensions
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// OLED display I2C address
#define OLED_RESET -1
#define SSD1306_I2C_ADDRESS 0x3C

#define analogPin A0

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const uint8_t PROGMEM image[] = {
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11000111,
0b10001111,
0b11111111,
0b11111111,
0b00000000,
0b00000011,
0b11111111,
0b11111110,
0b00000000,
0b00000001,
0b11111111,
0b11111110,
0b00000000,
0b00000001,
0b11111111,
0b11111100,
0b00000000,
0b00000000,
0b11111111,
0b11111100,
0b00000000,
0b00000000,
0b11111111,
0b11111000,
0b00000000,
0b00000000,
0b01111111,
0b11111000,
0b00111000,
0b01110000,
0b01111111,
0b11111000,
0b00111000,
0b01110000,
0b01111111,
0b11111000,
0b00111000,
0b01110000,
0b01111111,
0b11111000,
0b00000000,
0b00000000,
0b01111111,
0b11111000,
0b00000000,
0b00000000,
0b01111111,
0b11111000,
0b00000000,
0b00000000,
0b01111111,
0b11111100,
0b00010000,
0b00100000,
0b11111111,
0b11111110,
0b00011111,
0b11100011,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
0b11111111,
};
// const uint8_t PROGMEM image[] = {
// 0b00000000,
// 0b00000000,
// 0b00000000,
// 0b00000000,
// 0b00000000,
// 0b01111111,
// 0b11111000,
// 0b00000000,
// 0b00000001,
// 0b11111111,
// 0b11111110,
// 0b00000000,
// 0b00000011,
// 0b11111111,
// 0b11111111,
// 0b00000000,
// 0b00001111,
// 0b11111111,
// 0b11111111,
// 0b11000000,
// 0b00011111,
// 0b11111111,
// 0b11111111,
// 0b11100000,
// 0b00011111,
// 0b11111111,
// 0b11111111,
// 0b11100000,
// 0b00111111,
// 0b11111111,
// 0b11111111,
// 0b11110000,
// 0b01111111,
// 0b11111111,
// 0b11111111,
// 0b11111000,
// 0b01111110,
// 0b00000000,
// 0b00011111,
// 0b11111000,
// 0b11111000,
// 0b00000000,
// 0b00000011,
// 0b11111100,
// 0b11111000,
// 0b00000000,
// 0b00000000,
// 0b01111100,
// 0b11111001,
// 0b11111111,
// 0b11100000,
// 0b00111100,
// 0b11111111,
// 0b11111111,
// 0b11111100,
// 0b00111100,
// 0b11111111,
// 0b00000000,
// 0b01111111,
// 0b01111100,
// 0b11111100,
// 0b00000000,
// 0b00000111,
// 0b11111100,
// 0b11111100,
// 0b00000000,
// 0b00000001,
// 0b11111100,
// 0b11111111,
// 0b11111111,
// 0b11100000,
// 0b11111100,
// 0b11111111,
// 0b11111111,
// 0b11111000,
// 0b11111100,
// 0b11111111,
// 0b00000000,
// 0b01111111,
// 0b11111100,
// 0b11111100,
// 0b00000000,
// 0b00001111,
// 0b11111100,
// 0b11111110,
// 0b11111111,
// 0b10000011,
// 0b11111100,
// 0b01111111,
// 0b11111111,
// 0b11110011,
// 0b11111000,
// 0b01111111,
// 0b11111111,
// 0b11111111,
// 0b11111000,
// 0b00111111,
// 0b11111111,
// 0b11111111,
// 0b11110000,
// 0b00011111,
// 0b11111111,
// 0b11111111,
// 0b11100000,
// 0b00011111,
// 0b11111111,
// 0b11111111,
// 0b11100000,
// 0b00001111,
// 0b11111111,
// 0b11111111,
// 0b11000000,
// 0b00000011,
// 0b11111111,
// 0b11111111,
// 0b00000000,
// 0b00000001,
// 0b11111111,
// 0b11111110,
// 0b00000000,
// 0b00000000,
// 0b01111111,
// 0b11111000,
// 0b00000000,
// 0b00000000,
// 0b00000000,
// 0b00000000,
// 0b00000000,
// };

void setup()
{
  Serial.begin(9600);

  // Initialize the display with the correct parameters
  if(!display.begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  Serial.println("Trying to run");

  pinMode(A0, INPUT);

  display.clearDisplay();

  drawText();

  drawBitmap();
}

void drawText()
{
  display.fillRect(0, 0, 128, 16, SSD1306_BLACK);

  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0,-1);

  display.print("Discord");
}

void drawScreen(int percentage)
{
  display.fillRect(0, 20, 64, 32, SSD1306_BLACK);

  display.setCursor(0, 20);

  display.print(String(percentage)+"%");

  display.display();
}

int smoothedValue = 0;
float alpha = 0.4;

void loop()
{

  int f = round(analogRead(analogPin) * 100.0f / 1000.0f);
  smoothedValue = alpha * f + (1-alpha) * smoothedValue;
  drawScreen(smoothedValue);
}

void drawBitmap()
{
  display.drawBitmap(96, 32, image, 32, 32, SSD1306_WHITE);

  display.display();
}